// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/naelcodes/ab-backend/internal/ent/customer"
	"github.com/naelcodes/ab-backend/internal/ent/imputation"
	"github.com/naelcodes/ab-backend/internal/ent/payment"
)

// PaymentCreate is the builder for creating a Payment entity.
type PaymentCreate struct {
	config
	mutation *PaymentMutation
	hooks    []Hook
}

// SetNumber sets the "number" field.
func (pc *PaymentCreate) SetNumber(s string) *PaymentCreate {
	pc.mutation.SetNumber(s)
	return pc
}

// SetDate sets the "date" field.
func (pc *PaymentCreate) SetDate(s string) *PaymentCreate {
	pc.mutation.SetDate(s)
	return pc
}

// SetBalance sets the "balance" field.
func (pc *PaymentCreate) SetBalance(f float64) *PaymentCreate {
	pc.mutation.SetBalance(f)
	return pc
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableBalance(f *float64) *PaymentCreate {
	if f != nil {
		pc.SetBalance(*f)
	}
	return pc
}

// SetAmount sets the "amount" field.
func (pc *PaymentCreate) SetAmount(f float64) *PaymentCreate {
	pc.mutation.SetAmount(f)
	return pc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableAmount(f *float64) *PaymentCreate {
	if f != nil {
		pc.SetAmount(*f)
	}
	return pc
}

// SetFop sets the "fop" field.
func (pc *PaymentCreate) SetFop(pa payment.Fop) *PaymentCreate {
	pc.mutation.SetFop(pa)
	return pc
}

// SetNillableFop sets the "fop" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableFop(pa *payment.Fop) *PaymentCreate {
	if pa != nil {
		pc.SetFop(*pa)
	}
	return pc
}

// SetUsedAmount sets the "used_amount" field.
func (pc *PaymentCreate) SetUsedAmount(f float64) *PaymentCreate {
	pc.mutation.SetUsedAmount(f)
	return pc
}

// SetNillableUsedAmount sets the "used_amount" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableUsedAmount(f *float64) *PaymentCreate {
	if f != nil {
		pc.SetUsedAmount(*f)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *PaymentCreate) SetStatus(pa payment.Status) *PaymentCreate {
	pc.mutation.SetStatus(pa)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableStatus(pa *payment.Status) *PaymentCreate {
	if pa != nil {
		pc.SetStatus(*pa)
	}
	return pc
}

// SetIDChartsOfAccounts sets the "id_charts_of_accounts" field.
func (pc *PaymentCreate) SetIDChartsOfAccounts(i int) *PaymentCreate {
	pc.mutation.SetIDChartsOfAccounts(i)
	return pc
}

// SetNillableIDChartsOfAccounts sets the "id_charts_of_accounts" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableIDChartsOfAccounts(i *int) *PaymentCreate {
	if i != nil {
		pc.SetIDChartsOfAccounts(*i)
	}
	return pc
}

// SetIDCurrency sets the "id_currency" field.
func (pc *PaymentCreate) SetIDCurrency(i int) *PaymentCreate {
	pc.mutation.SetIDCurrency(i)
	return pc
}

// SetNillableIDCurrency sets the "id_currency" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableIDCurrency(i *int) *PaymentCreate {
	if i != nil {
		pc.SetIDCurrency(*i)
	}
	return pc
}

// SetTag sets the "Tag" field.
func (pc *PaymentCreate) SetTag(pa payment.Tag) *PaymentCreate {
	pc.mutation.SetTag(pa)
	return pc
}

// SetNillableTag sets the "Tag" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableTag(pa *payment.Tag) *PaymentCreate {
	if pa != nil {
		pc.SetTag(*pa)
	}
	return pc
}

// SetIDPaymentReceived sets the "id_payment_received" field.
func (pc *PaymentCreate) SetIDPaymentReceived(i int) *PaymentCreate {
	pc.mutation.SetIDPaymentReceived(i)
	return pc
}

// SetNillableIDPaymentReceived sets the "id_payment_received" field if the given value is not nil.
func (pc *PaymentCreate) SetNillableIDPaymentReceived(i *int) *PaymentCreate {
	if i != nil {
		pc.SetIDPaymentReceived(*i)
	}
	return pc
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (pc *PaymentCreate) SetCustomerID(id int) *PaymentCreate {
	pc.mutation.SetCustomerID(id)
	return pc
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (pc *PaymentCreate) SetCustomer(c *Customer) *PaymentCreate {
	return pc.SetCustomerID(c.ID)
}

// AddImputationIDs adds the "imputations" edge to the Imputation entity by IDs.
func (pc *PaymentCreate) AddImputationIDs(ids ...int) *PaymentCreate {
	pc.mutation.AddImputationIDs(ids...)
	return pc
}

// AddImputations adds the "imputations" edges to the Imputation entity.
func (pc *PaymentCreate) AddImputations(i ...*Imputation) *PaymentCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pc.AddImputationIDs(ids...)
}

// Mutation returns the PaymentMutation object of the builder.
func (pc *PaymentCreate) Mutation() *PaymentMutation {
	return pc.mutation
}

// Save creates the Payment in the database.
func (pc *PaymentCreate) Save(ctx context.Context) (*Payment, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PaymentCreate) SaveX(ctx context.Context) *Payment {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PaymentCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PaymentCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PaymentCreate) defaults() {
	if _, ok := pc.mutation.Balance(); !ok {
		v := payment.DefaultBalance
		pc.mutation.SetBalance(v)
	}
	if _, ok := pc.mutation.Amount(); !ok {
		v := payment.DefaultAmount
		pc.mutation.SetAmount(v)
	}
	if _, ok := pc.mutation.Fop(); !ok {
		v := payment.DefaultFop
		pc.mutation.SetFop(v)
	}
	if _, ok := pc.mutation.UsedAmount(); !ok {
		v := payment.DefaultUsedAmount
		pc.mutation.SetUsedAmount(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := payment.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.IDChartsOfAccounts(); !ok {
		v := payment.DefaultIDChartsOfAccounts
		pc.mutation.SetIDChartsOfAccounts(v)
	}
	if _, ok := pc.mutation.IDCurrency(); !ok {
		v := payment.DefaultIDCurrency
		pc.mutation.SetIDCurrency(v)
	}
	if _, ok := pc.mutation.Tag(); !ok {
		v := payment.DefaultTag
		pc.mutation.SetTag(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PaymentCreate) check() error {
	if _, ok := pc.mutation.Number(); !ok {
		return &ValidationError{Name: "number", err: errors.New(`ent: missing required field "Payment.number"`)}
	}
	if v, ok := pc.mutation.Number(); ok {
		if err := payment.NumberValidator(v); err != nil {
			return &ValidationError{Name: "number", err: fmt.Errorf(`ent: validator failed for field "Payment.number": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "Payment.date"`)}
	}
	if v, ok := pc.mutation.Date(); ok {
		if err := payment.DateValidator(v); err != nil {
			return &ValidationError{Name: "date", err: fmt.Errorf(`ent: validator failed for field "Payment.date": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "Payment.balance"`)}
	}
	if v, ok := pc.mutation.Balance(); ok {
		if err := payment.BalanceValidator(v); err != nil {
			return &ValidationError{Name: "balance", err: fmt.Errorf(`ent: validator failed for field "Payment.balance": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Payment.amount"`)}
	}
	if v, ok := pc.mutation.Amount(); ok {
		if err := payment.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "Payment.amount": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Fop(); !ok {
		return &ValidationError{Name: "fop", err: errors.New(`ent: missing required field "Payment.fop"`)}
	}
	if v, ok := pc.mutation.Fop(); ok {
		if err := payment.FopValidator(v); err != nil {
			return &ValidationError{Name: "fop", err: fmt.Errorf(`ent: validator failed for field "Payment.fop": %w`, err)}
		}
	}
	if _, ok := pc.mutation.UsedAmount(); !ok {
		return &ValidationError{Name: "used_amount", err: errors.New(`ent: missing required field "Payment.used_amount"`)}
	}
	if v, ok := pc.mutation.UsedAmount(); ok {
		if err := payment.UsedAmountValidator(v); err != nil {
			return &ValidationError{Name: "used_amount", err: fmt.Errorf(`ent: validator failed for field "Payment.used_amount": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Payment.status"`)}
	}
	if v, ok := pc.mutation.Status(); ok {
		if err := payment.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Payment.status": %w`, err)}
		}
	}
	if _, ok := pc.mutation.IDChartsOfAccounts(); !ok {
		return &ValidationError{Name: "id_charts_of_accounts", err: errors.New(`ent: missing required field "Payment.id_charts_of_accounts"`)}
	}
	if _, ok := pc.mutation.IDCurrency(); !ok {
		return &ValidationError{Name: "id_currency", err: errors.New(`ent: missing required field "Payment.id_currency"`)}
	}
	if _, ok := pc.mutation.Tag(); !ok {
		return &ValidationError{Name: "Tag", err: errors.New(`ent: missing required field "Payment.Tag"`)}
	}
	if v, ok := pc.mutation.Tag(); ok {
		if err := payment.TagValidator(v); err != nil {
			return &ValidationError{Name: "Tag", err: fmt.Errorf(`ent: validator failed for field "Payment.Tag": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "Payment.customer"`)}
	}
	return nil
}

func (pc *PaymentCreate) sqlSave(ctx context.Context) (*Payment, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PaymentCreate) createSpec() (*Payment, *sqlgraph.CreateSpec) {
	var (
		_node = &Payment{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(payment.Table, sqlgraph.NewFieldSpec(payment.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.Number(); ok {
		_spec.SetField(payment.FieldNumber, field.TypeString, value)
		_node.Number = value
	}
	if value, ok := pc.mutation.Date(); ok {
		_spec.SetField(payment.FieldDate, field.TypeString, value)
		_node.Date = value
	}
	if value, ok := pc.mutation.Balance(); ok {
		_spec.SetField(payment.FieldBalance, field.TypeFloat64, value)
		_node.Balance = value
	}
	if value, ok := pc.mutation.Amount(); ok {
		_spec.SetField(payment.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := pc.mutation.Fop(); ok {
		_spec.SetField(payment.FieldFop, field.TypeEnum, value)
		_node.Fop = value
	}
	if value, ok := pc.mutation.UsedAmount(); ok {
		_spec.SetField(payment.FieldUsedAmount, field.TypeFloat64, value)
		_node.UsedAmount = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(payment.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.IDChartsOfAccounts(); ok {
		_spec.SetField(payment.FieldIDChartsOfAccounts, field.TypeInt, value)
		_node.IDChartsOfAccounts = value
	}
	if value, ok := pc.mutation.IDCurrency(); ok {
		_spec.SetField(payment.FieldIDCurrency, field.TypeInt, value)
		_node.IDCurrency = value
	}
	if value, ok := pc.mutation.Tag(); ok {
		_spec.SetField(payment.FieldTag, field.TypeEnum, value)
		_node.Tag = value
	}
	if value, ok := pc.mutation.IDPaymentReceived(); ok {
		_spec.SetField(payment.FieldIDPaymentReceived, field.TypeInt, value)
		_node.IDPaymentReceived = value
	}
	if nodes := pc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   payment.CustomerTable,
			Columns: []string{payment.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.id_customer = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ImputationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   payment.ImputationsTable,
			Columns: []string{payment.ImputationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(imputation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PaymentCreateBulk is the builder for creating many Payment entities in bulk.
type PaymentCreateBulk struct {
	config
	err      error
	builders []*PaymentCreate
}

// Save creates the Payment entities in the database.
func (pcb *PaymentCreateBulk) Save(ctx context.Context) ([]*Payment, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Payment, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PaymentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PaymentCreateBulk) SaveX(ctx context.Context) []*Payment {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PaymentCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PaymentCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
