// Code generated by ent, DO NOT EDIT.

package customer

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the customer type in the database.
	Label = "customer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCustomerName holds the string denoting the customer_name field in the database.
	FieldCustomerName = "customer_name"
	// FieldAccountNumber holds the string denoting the account_number field in the database.
	FieldAccountNumber = "account_number"
	// FieldIDCurrency holds the string denoting the id_currency field in the database.
	FieldIDCurrency = "id_currency"
	// FieldIDCountry holds the string denoting the id_country field in the database.
	FieldIDCountry = "id_country"
	// FieldAlias holds the string denoting the alias field in the database.
	FieldAlias = "alias"
	// FieldAbKey holds the string denoting the ab_key field in the database.
	FieldAbKey = "ab_key"
	// FieldTmcClientNumber holds the string denoting the tmc_client_number field in the database.
	FieldTmcClientNumber = "tmc_client_number"
	// FieldTag holds the string denoting the tag field in the database.
	FieldTag = "tag"
	// Table holds the table name of the customer in the database.
	Table = "customer"
)

// Columns holds all SQL columns for customer fields.
var Columns = []string{
	FieldID,
	FieldCustomerName,
	FieldAccountNumber,
	FieldIDCurrency,
	FieldIDCountry,
	FieldAlias,
	FieldAbKey,
	FieldTmcClientNumber,
	FieldTag,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Tag defines the type for the "Tag" enum field.
type Tag string

// Tag3 is the default value of the Tag enum.
const DefaultTag = Tag3

// Tag values.
const (
	Tag1 Tag = "1"
	Tag2 Tag = "2"
	Tag3 Tag = "3"
)

func (_tag Tag) String() string {
	return string(_tag)
}

// TagValidator is a validator for the "Tag" field enum values. It is called by the builders before save.
func TagValidator(_tag Tag) error {
	switch _tag {
	case Tag1, Tag2, Tag3:
		return nil
	default:
		return fmt.Errorf("customer: invalid enum value for Tag field: %q", _tag)
	}
}

// OrderOption defines the ordering options for the Customer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCustomerName orders the results by the customer_name field.
func ByCustomerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerName, opts...).ToFunc()
}

// ByAccountNumber orders the results by the account_number field.
func ByAccountNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountNumber, opts...).ToFunc()
}

// ByIDCurrency orders the results by the id_currency field.
func ByIDCurrency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDCurrency, opts...).ToFunc()
}

// ByIDCountry orders the results by the id_country field.
func ByIDCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIDCountry, opts...).ToFunc()
}

// ByAlias orders the results by the alias field.
func ByAlias(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAlias, opts...).ToFunc()
}

// ByAbKey orders the results by the ab_key field.
func ByAbKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAbKey, opts...).ToFunc()
}

// ByTmcClientNumber orders the results by the tmc_client_number field.
func ByTmcClientNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTmcClientNumber, opts...).ToFunc()
}

// ByTag orders the results by the Tag field.
func ByTag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTag, opts...).ToFunc()
}
