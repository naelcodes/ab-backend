// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/naelcodes/ab-backend/internal/ent/customer"
)

// Customer is the model entity for the Customer schema.
type Customer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CustomerName holds the value of the "customer_name" field.
	CustomerName string `json:"customer_name,omitempty"`
	// AccountNumber holds the value of the "account_number" field.
	AccountNumber string `json:"account_number,omitempty"`
	// IDCurrency holds the value of the "id_currency" field.
	IDCurrency int `json:"id_currency,omitempty"`
	// IDCountry holds the value of the "id_country" field.
	IDCountry int `json:"id_country,omitempty"`
	// Alias holds the value of the "alias" field.
	Alias string `json:"alias,omitempty"`
	// AbKey holds the value of the "ab_key" field.
	AbKey string `json:"ab_key,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// TmcClientNumber holds the value of the "tmc_client_number" field.
	TmcClientNumber string `json:"tmc_client_number,omitempty"`
	// Tag holds the value of the "Tag" field.
	Tag          customer.Tag `json:"Tag,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Customer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case customer.FieldID, customer.FieldIDCurrency, customer.FieldIDCountry:
			values[i] = new(sql.NullInt64)
		case customer.FieldCustomerName, customer.FieldAccountNumber, customer.FieldAlias, customer.FieldAbKey, customer.FieldState, customer.FieldTmcClientNumber, customer.FieldTag:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Customer fields.
func (c *Customer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case customer.FieldCustomerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_name", values[i])
			} else if value.Valid {
				c.CustomerName = value.String
			}
		case customer.FieldAccountNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account_number", values[i])
			} else if value.Valid {
				c.AccountNumber = value.String
			}
		case customer.FieldIDCurrency:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id_currency", values[i])
			} else if value.Valid {
				c.IDCurrency = int(value.Int64)
			}
		case customer.FieldIDCountry:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field id_country", values[i])
			} else if value.Valid {
				c.IDCountry = int(value.Int64)
			}
		case customer.FieldAlias:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field alias", values[i])
			} else if value.Valid {
				c.Alias = value.String
			}
		case customer.FieldAbKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ab_key", values[i])
			} else if value.Valid {
				c.AbKey = value.String
			}
		case customer.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				c.State = value.String
			}
		case customer.FieldTmcClientNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tmc_client_number", values[i])
			} else if value.Valid {
				c.TmcClientNumber = value.String
			}
		case customer.FieldTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Tag", values[i])
			} else if value.Valid {
				c.Tag = customer.Tag(value.String)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Customer.
// This includes values selected through modifiers, order, etc.
func (c *Customer) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Customer.
// Note that you need to call Customer.Unwrap() before calling this method if this Customer
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Customer) Update() *CustomerUpdateOne {
	return NewCustomerClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Customer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Customer) Unwrap() *Customer {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Customer is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Customer) String() string {
	var builder strings.Builder
	builder.WriteString("Customer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("customer_name=")
	builder.WriteString(c.CustomerName)
	builder.WriteString(", ")
	builder.WriteString("account_number=")
	builder.WriteString(c.AccountNumber)
	builder.WriteString(", ")
	builder.WriteString("id_currency=")
	builder.WriteString(fmt.Sprintf("%v", c.IDCurrency))
	builder.WriteString(", ")
	builder.WriteString("id_country=")
	builder.WriteString(fmt.Sprintf("%v", c.IDCountry))
	builder.WriteString(", ")
	builder.WriteString("alias=")
	builder.WriteString(c.Alias)
	builder.WriteString(", ")
	builder.WriteString("ab_key=")
	builder.WriteString(c.AbKey)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(c.State)
	builder.WriteString(", ")
	builder.WriteString("tmc_client_number=")
	builder.WriteString(c.TmcClientNumber)
	builder.WriteString(", ")
	builder.WriteString("Tag=")
	builder.WriteString(fmt.Sprintf("%v", c.Tag))
	builder.WriteByte(')')
	return builder.String()
}

// Customers is a parsable slice of Customer.
type Customers []*Customer
